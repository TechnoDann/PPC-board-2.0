# Usage: rake db:post_archive FILE=filename
namespace :db do
  desc "Post an archive generated by the archive script."
  task :post_archive => :environment do
    class Hash
      #http://stackoverflow.com/questions/6227600/how-to-remove-a-key-from-hash-and-get-the-remaining-hash-in-ruby-rails
      def remove!(*keys)
        keys.each{|key| self.delete(key) }
        self
      end
      def remove(*keys)
        self.dup.remove!(*keys)
      end
    end
    def read_archive(filename)
      file = File.open(filename)
      ret = Marshal.load(file)
      file.close
      ret
    end
    def post_archive(archive, parent, user)
      parent_id = nil
      archive.each do |entity|
        if entity.is_a?(Hash)
          safe_hash = entity.remove(:timestamp).merge!({:parent_id => parent})
          if entity[:subject] == "" or entity[:subject] == " "
            safe_hash[:subject] = "[[[UNPARSABLE SUBJECT LINE]]]"
            puts entity
            puts "Blank subject"
          end
          if entity[:author] == ""
            safe_hash[:subject] = "[[[UNPARSABLE AUTHOR NAME]]]"
            puts entity
            puts "Blank author"
          end
          potential_dups = Post.where(:created_at => entity[:timestamp],
                                      :subject => entity[:subject],
                                      :author => entity[:author],
                                      :body => entity[:body],
                                      :user_id => user.id)
          if potential_dups.length == 0
            post = Post.new(safe_hash)
            post.user = user
            post.save
            parent_id = post.id
            post.created_at = entity[:timestamp]
            post.sort_timestamp = post.created_at
            post.save
          else
            if potential_dups.length > 1
              puts entity
              puts potential_dups.length
            end
            post = potential_dups[0]
            parent_id = post.id
          end
        elsif entity.is_a?(Array)
          unless entity == []
            # Subthread of the post we last posted
            post_archive(entity, parent_id, user)
          end
        else
          puts("Can't happen")
        end
      end
    end
    def post_threads
      user = User.find_by_name("Archive Script")
      board = read_archive(ENV['FILE'] || "/tmp/threads-to-read")
      board.each do |thread|
        post_archive thread, nil, user
        true
      end
      true
    end
    post_threads
  end
end
